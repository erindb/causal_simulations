/*

TODO:

- ☑ rewrite statePrior in terms of exogenous randomness
    - actually, JK, it's already basically exogenous.
      all the initial position and velocity stuff is
      in
- ☑ rewrite counterfactual to sample a shadow world by
  samping close exogenous randomness
- ☑ write physics simulator run_physics
- ☑ animate worlds
- write L0 and view worlds it chooses
- hope that a bunch of these involve A hitting B.
- write S1 and evaluate on:
    - A hits B
        - and B was still ==> YES
        - and B was moving in different direction ==> YES
        - and B was moving in same direction ==> ???
        - and B was moving in opposite direction ==> ???
    - B hits A
        - and A was still ==> ???
        - and A was moving in different direction ==> ???
        - and A was moving in same direction ==> ???
        - and A was moving in opposite direction ==> ???
    - A and B do not collide
        - and both are moving ==> NO
        - and A is moving, B is still ==> NO
        - and A is still, B is moving ==> NO
- extend to 3 objects, A, B, and E
- evaluate S1 on:
    - overdetermination
    - joint cause
    - preemption

*/

var STICKINESS = 0.9;

// utils
var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};
var displayObj = function(x) {
  display(JSON.stringify(x, undefined, 2));
};
var discretizedUniform = function(a, b, nbins) {
  var width = b-a;
  var width_per_step = width/(nbins-1);
  return randomInteger(nbins)*width_per_step + a;
};
var factor_meaning = function(meaning) {
  factor(Math.log(meaning));
};
var clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};
var extend = function(a, b) {
  return _.extend(clone(a), b);
};

// physics
var placeable_section_denominator = 5;
var n = 4;
var placeable_x = worldWidth/placeable_section_denominator;
var x_margin = placeable_x*((placeable_section_denominator-1)/2);
var placeable_y = worldHeight/placeable_section_denominator;
var y_margin = placeable_y*((placeable_section_denominator-1)/2);
var scale_x = function(x) {
  return x_margin + (placeable_x/n * (2*x + 1));
};
var scale_y = function(y) {
  return y_margin + (placeable_y/n * (2*y + 1));
};
var unscale_x = function(x) {
  return (n*(x - x_margin)/(2*placeable_x));
};
var unscale_y = function(y) {
  return (n*(y - y_margin)/(2*placeable_y));
};
var unscale_position = function(p) {
  return {x: unscale_x(p), y: unscale_y(p)};
};
var v_scale = 50;
var scale_velocity = function(v) {
  return v*v_scale;
};
var unscale_velocity = function(v) {
  return {x: v[0]/v_scale, y: v[1]/v_scale};
};
var a_size = 4;
var b_size = 3;
var place_object = function(w, obj) {
  return {
    x: scale_x(w.positions[obj].x),
    y: scale_y(1 - w.positions[obj].y),
    velocity: [
      scale_velocity(w.velocities[obj].x),
      scale_velocity(w.velocities[obj].y)
    ],
    dims: obj == "A" ? [a_size] : [b_size]
  }
};
var billiard_ball = {
  shape: "circle",
  static: false
};
var physicsify_world = function(w) {
  var A = extend(billiard_ball, place_object(w, "A"));
  var B = extend(billiard_ball, place_object(w, "B"));
  return [A, B];
};
var unphysicsify_world = function(w) {
  var a_index = w[0].dims[0]==a_size ? 0 : 1;
  var b_index = 1 - a_index;
  var A = w[a_index];
  var B = w[b_index];
  return {
    objects: ["A", "B"],
    positions: {
      "A": unscale_position(A),
      "B": unscale_position(B)
    },
    velocities: {
      "A": unscale_velocity(A.velocity),
      "B": unscale_velocity(B.velocity)
    }
  };
};
var run_physics = function(w) {
  // displayObj(physicsify_world(w));
  var final_world = physics.run(200, physicsify_world(w));
  // displayObj(final_world);
  return unphysicsify_world(final_world);
};
var animate = function(w) {
  physics.animate(200, physicsify_world(w));
};

// World prior

// Prior over positions.
// NxN grid of starting positions.
var all_positions = reduce(function(x, acc) {
  return acc.concat(map(function(y) {
    return {x: x, y: y};
  }, _.range(2)));
}, [], _.range(2));
// 2 objects cannot start in the same position.
var positionPrior = function(available_positions) {
  var i = randomInteger(available_positions.length);
  return {
    available_positions: (available_positions.slice(0, i).concat(
          available_positions.slice(i+1, available_positions.length))),
    position: available_positions[i]
  }
}
var positionsPrior = function(objects) {
  return reduce(
    function(o, acc) {
      var position_sample = positionPrior(acc.remaining);
      return {
        remaining: position_sample.available_positions,
        sampled: extend(acc.sampled, _.fromPairs([
          [o, position_sample.position]
        ]))
      };
    },
    {sampled: {}, remaining: all_positions},
    objects).sampled;
};

var velocityPrior = function() {
  return discretizedUniform(-1, 1, 3);
}

// Prior over velocities
var velocitiesPrior = function(objects) {
  return reduce(function(o, acc) {
    return extend(acc, _.fromPairs([[
      o, {
        x: velocityPrior(),
        y: velocityPrior()
      }
    ]]));
  }, {}, objects);
};

var shadowPositionsPrior = function(positions) {
  var stickiness_samples = reduce(function(obj, acc) {
    var p = positions[obj];
    var keep = flip(STICKINESS);
    return {
      taken_positions: keep ? acc.taken_positions.concat([p]) : acc.taken_positions,
      pieces: acc.pieces.concat([[obj, keep, p]])
    };
  }, {taken_positions: [], pieces: []}, _.keys(positions));
  var available_positions = _.difference(
    all_positions,
    stickiness_samples.taken_positions
  );
  var dict_pairs = reduce(
    function(stickiness_sample, acc) {
      var obj = stickiness_sample[0];
      var keep = stickiness_sample[1];
      var p = stickiness_sample[2];
      var new_positions = acc.new_positions;
      var available_positions = acc.available_positions;
      if (keep) {
        return {
          new_positions: new_positions.concat([[obj, p]]),
          available_positions: available_positions
        };
      } else {
        var position_sample = positionPrior(available_positions);
        return {
          new_positions: new_positions.concat([
            [obj, position_sample.position]
          ]),
          available_positions: position_sample.available_positions
        };
      }
    },
    {new_positions: [], available_positions: available_positions},
    stickiness_samples.pieces
  );
  return _.fromPairs(dict_pairs.new_positions);
};

// Sample positions and velocities for each object
var statePrior = function() {
  // var objects = uniformDraw([
  //   [], ["A"], ["B"], ["A", "B"]
  // ]);
  var objects = ["A", "B"];
  return {
    objects: objects,
    positions: positionsPrior(objects),
    velocities: velocitiesPrior(objects)
  }
};

var shadowVelocitiesPrior = function(velocities) {
  return _.fromPairs(map(function(v) {
    return [v[0], {
      x: flip(STICKINESS) ? v[1].x : velocityPrior(),
      y: flip(STICKINESS) ? v[1].y : velocityPrior()
    }];
  }, _.toPairs(velocities)));
};

var shadowStatePrior = function(w) {
  return {
    objects: w.objects,
    positions: shadowPositionsPrior(w.positions),
    velocities: shadowVelocitiesPrior(w.velocities)
  };
};

var all_true = function(meanings) {
  // display(meanings);
  return reduce(function(meaning, acc) {
    return acc * meaning;
  }, 1, meanings);
};

// if premise had been the case,
// then conclusion would have been the case
var counterfactual = function(args) {
  // how often is the conclusion true when the premise is?
  var cf = Infer(
    {method: "rejection", samples: 50},
    function() {
      var shadow_w = shadowStatePrior(args.target_world);
      // i.e. condition on truth of premise.
      // premise is on *initial conditions*
      var premise = meaning({
        utterance: args.premise,
        target_world: shadow_w,
        timing: "initial",
        // input true world as the "counterfactual" now
        counterfactual_world: args.target_world
      });
      factor_meaning(premise);
      // return whether or not conclusion is true
      // conclusion is on *final conditions*
      var conclusion = meaning({
        utterance: args.conclusion,
        target_world: shadow_w,
        timing: "final",
        counterfactual_world: args.target_world
      });
      return conclusion;
    }
  );
  var scr = cf.score(1);
  return (scr > -Infinity) ? Math.exp(scr) : 0;
};

var disambiguate = function(utterance, cf_version) {
  if (utterance == "A moved" || utterance == "B moved") {
    if (cf_version == "how") {
      return utterance + " differently";
    } else if (cf_version == "whether") {
      return "not " + utterance;
    } else {
      display("error 2130498");
    }
  } else {
    return utterance;
  }
};

var sample_cf_type = function() {
  return uniformDraw(["how", "whether"]);
//   return "how";
}
// "A moved", "B moved", w, cf_version, shadow_w
var explanation = function(args) {
  var disambiguated_premise = disambiguate(args.explanans, args.cf_type_premise);
  var disambiguated_conclusion = disambiguate(args.explanandum, args.cf_type_conclusion);
  return all_true([
    // explanans is true of the actual world
    meaning({
      utterance: args.explanans,
      target_world: args.target_world,
      timing: "initial"
    }),
    // explanandum is true of the actual world
    meaning({
      utterance: args.explanandum,
      target_world: args.target_world,
      timing: "final"
    }),
    // counterfactually, if not explanans, then not explanandum.
    counterfactual({
      premise: disambiguated_premise,
      conclusion: disambiguated_conclusion,
      target_world: args.target_world
    })
  ]);
};

var moved = function(w, obj, timing) {
  // displayObj(w.velocities.B);
  var obj_exists = w["objects"].indexOf(obj) >= 0;
  if (obj_exists) {
    var moved_at_start = (w["velocities"][obj]["x"] != 0 |
                          w["velocities"][obj]["y"] != 0);
    if (timing == "initial") {
      return moved_at_start;
    } else {
      var w_final = run_physics(w);
      var moved_at_end = (w_final["velocities"][obj]["x"] != 0 |
                          w_final["velocities"][obj]["y"] != 0);
      if (timing == "final") {
        return moved_at_end;
      } else {
        // if no timing specified, then any movement counts
        return moved_at_start | moved_at_end;
      }
    }
  } else {
    // TODO presupposition?
    return 0;
  }
};

var moved_differently = function(w, obj, shadow_w, timing) {
  var relevant_world = timing=="initial" ? shadow_w : run_physics(shadow_w);
  var relevant_original_world = timing=="initial" ? w : run_physics(w);
  // velocity for obj is different between world and original world
  var obj_exists = w["objects"].indexOf(obj) >= 0;
  if (!obj_exists) {
    return 0;
  } else {
    var x_different = (relevant_world["velocities"][obj]["x"] !=
                       relevant_original_world["velocities"][obj]["x"]);
    var y_different = (relevant_world["velocities"][obj]["y"] !=
                       relevant_original_world["velocities"][obj]["y"]);
    return (x_different | y_different);
  }
};

var meaning = function(args) {
//   display(args.utterance);
  if (args.utterance == "silence") {
    return 1;
  } else if (args.utterance == "A moved B") {
    // A moved B ==>
    // A (exists|moved).
    // B moved.
    // If A had not (existed/moved), then B would not have moved.
    return explanation({
      explanans: "A moved",
      explanandum: "B moved",
      target_world: args.target_world,
      counterfactual_type: args.counterfactual_type,
      cf_type_premise: args.cf_type_premise,
      cf_type_conclusion: args.cf_type_conclusion
    });
//   } else if (utterance == "A" || utterance == "B") {
//     return meaning(disambiguate(utterance, cf_version), w, timing);
  } else if (args.utterance == "A moved") {
    // A moved entails that A existed
    // (TODO: should this be a presupposition?)
    return moved(args.target_world, "A", args.timing);
  } else if (args.utterance == "B moved") {
    // B moved entails that B existed
    // (TODO: should this be a presupposition?)
    return moved(args.target_world, "B", args.timing);
  } else if (args.utterance == "A moved differently") {
    return moved_differently(args.target_world, "A", args.counterfactual_world, args.timing);
  } else if (args.utterance == "B moved differently") {
    return moved_differently(args.target_world, "B", args.counterfactual_world, args.timing);
  } else if (args.utterance == "A existed") {
    return w["objects"].indexOf("A") >= 0;
  } else if (args.utterance == "B existed") {
    return w["objects"].indexOf("B") >= 0;
  } else if (args.utterance.slice(0, 3) == "not") {
    return 1 - meaning({
      utterance: args.utterance.slice(4, args.utterance.length),
      target_world: args.target_world,
      timing: args.timing,
      counterfactual_type: args.counterfactual_type,
      counterfactual_world: args.counterfactual_world
    });
  }
};

var cached_meaning = cache(function(arg_string) {
  var args = JSON.parse(arg_string);
  return meaning(args);
});

var l0 = Infer(
  {method: "rejection", samples: 5},
  function() {
    // var rs = Infer({method: "enumerate"}, function() {
    var w = statePrior();
    var cf_type_premise = sample_cf_type();
    var cf_type_conclusion = sample_cf_type();
    var m = cached_meaning(JSON.stringify({
      utterance: "A moved B",
      target_world: w,
      cf_type_premise: cf_type_premise,
      cf_type_conclusion: cf_type_conclusion
    }));
    factor_meaning(m);
    return extend(w, _.fromPairs([
      ["meaning", m],
      ["cf_type_premise", cf_type_premise],
      ["cf_type_conclusion", cf_type_conclusion]
    ]));
  }
);

var animate_results = function(r) {
  if (r.meaning > 0.9) {
    displayObj(r);
    animate(r);
  }
};
map(animate_results, l0.support());

// displayObj(w.velocities.B);
// displayObj(w.shadow_w.velocities.B)
// displayObj(run_physics(w.shadow_w).velocities.B)
// // run_physics(w.shadow_w);
// displayObj(w.positions);
// animate(w);
// animate(w.shadow_w);
// animate(w);
// // var w = statePrior();
// animate(w);

// // // // physics.animate(300, physicsify_world(w));
// var collision_world = {
//   objects: ["A", "B"],
//   positions: {A: {x: 0, y: 0}, B: {x: 1, y: 0}},
//   velocities: {A: {x: 1, y: 0}, B: {x: 0, y: 0}},
// };
// var cf_type_premise = "whether";
// var cf_type_conclusion = "whether";
// var m = cached_meaning(JSON.stringify({
//   utterance: "A moved B",
//   target_world: collision_world,
//   cf_type_premise: cf_type_premise,
//   cf_type_conclusion: cf_type_conclusion
// }));
// display(m);
// animate(collision_world);

// animate(collision_world);
// // displayObj(unphysicsify_world(
// //   physics.run(300, physicsify_world(collision_world))));
// // // physics.animate(300, physicsify_world(collision_world));
// var w = statePrior();
// var shadow_w = shadowStatePrior(w);
// displayObj(w);
// displayObj(shadow_w);