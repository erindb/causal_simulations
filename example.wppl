// webppl ab1d.wppl --require utils

// CONSTANTS
var STICKINESS = 0.9;

// WORLD PRIOR
var objects = ["A", "B"];

var object_map = function(f, objects) {
	return _.fromPairs(map(function(obj) {
		return [obj, f(obj)];
	}, objects));
}
var positions_prior = function() {
	return uniformDraw(["AB", "BA"]);
}
var place_object = function(positions, obj) {
	if (positions=="AB") {
		return (obj=="A" ? 1 : 0);
	} else if (positions=="BA") {
		return (obj=="B" ? 1 : 0);
	} else {
		display("invalid input for `positions`: " + positions);
	}
}
var velocity_prior = function() {
	return randomInteger(2);
}
var velocities_prior = function() {
	return _.fromPairs(map(function(obj) {
		return [obj, velocity_prior()];
	}, objects));
}
var world_prior = function() {
	var velocities = velocities_prior();
	var positions = positions_prior();
	return object_map(function(obj) {
		return {
			velocity: velocities[obj],
			position: place_object(positions, obj)
		};
	}, objects);
}

var l0 = function(utterance) {
	return Infer({method: "enumerate"}, function() {
		var w = world_prior();
		condition(w.A.velocity != 0 | w.B.velocity != 0);
		return w;
	})
}

// var utterance = "silence";

// map(function(w) {
// 	utils.write(w, "l0(silence)");
// }, l0("silence").support());

// // writes all worlds to viewable files
// utils.finish("l0_enumeration_" + utterance);

var w = world_prior();
utils.write(w, "sample from world prior");
utils.finish("example");
