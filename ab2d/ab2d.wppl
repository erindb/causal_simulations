/*
webppl ab2d.wppl --require ../node_modules/utils/ --results_dir ../results/ --modules_dir ../node_modules/
*/

// parameter of the model -- how closely should counterfactual
// RVs match actual RVs?
var stickiness = 0.53;

var myrange = function(a, b, c) {
  return map(function(x) {return _.round(x, 2);}, _.range(a, b, c));
}

var ball_prior = {
  velocity: {
    // x velocity is a negative number, because going to the left
    x: function() { return uniformDraw(myrange(-1, 0, 0.5)); },
    // y velocity can be any number
    y: function() { return uniformDraw(myrange(-1, 1, 1)); }
  },
  position: {
    // balls start on the right side of the world
    x: function() { return 6.5; },
    y: function() { return uniformDraw(myrange(-10, 10, 5)); }
  }
}

var ball_names = ["A", "B"];

var name_rv = function(ball_name, variable, dimension) {
  return ball_name + " " + variable + " " + dimension;
}

var get_rvs_for_this_ball = function(ball_name) {
  return reduce(function(variable, acc) {
    var fns = ball_prior[variable];
    return acc.concat([
      [name_rv(ball_name, variable, "x"), fns.x],
      [name_rv(ball_name, variable, "y"), fns.y]
    ]);
  }, [], _.keys(ball_prior));
}

/* Prior functions
So that it's easier to compute the counterfactual, write the prior
in terms of independent random variables, each with its own distribution.
*/
var prior_functions = _.fromPairs(reduce(function(ball_name, acc) {
  return acc.concat(get_rvs_for_this_ball(ball_name));
}, [], ball_names));
display(prior_functions);

var convert_for_phys = function(w) {
  return {
    A: {
      velocity: { x: w["A velocity x"], y: w["A velocity y"] },
      position: { x: w["A position x"], y: w["A position y"] }
    },
    B: {
      velocity: { x: w["B velocity x"], y: w["B velocity y"] },
      position: { x: w["B position x"], y: w["B position y"] }
    }
  }
}

var convert_from_phys = function(w) {
  return {
    "A velocity x": w.A.velocity.x,
    "A velocity y": w.A.velocity.y,
    "A position x": w.A.position.x,
    "A position y": w.A.position.y,
    "B velocity x": w.B.velocity.x,
    "B velocity y": w.B.velocity.y,
    "B position x": w.B.position.x,
    "B position y": w.B.position.y,
  }
}

// run a physics simulator to see what the positions and
// velocities of A and B will be at a later timepoint.
// this version isn't general, just applies to this situation
var run_physics = function(w) {
  // convert to bodies
  var later_world = utils.run_physics(convert_for_phys(w));
  return convert_from_phys(later_world);
}

var moved = function(w, ball) {
  var vx = (ball=="A") ? w["A velocity x"] : w["B velocity x"];
  var vy = (ball=="A") ? w["A velocity y"] : w["B velocity y"];
  return !(Math.abs(vx - 0) < 0.0001) || !(Math.abs(vy - 0) < 0.0001);
}

var counterfactualize = function(utterance, cf_type) {
  if (cf_type == "how") {
    return utterance + " differently";
  } else {
    return "not " + utterance;
  }
}

var different = function(ball, actual_world, cf_world, timing) {
  if (timing == "end") {
    var actual_world_later = run_physics(actual_world);
    var cf_world_later = run_physics(cf_world);
    return different(ball, actual_world_later, cf_world_later);
  } else {
    if (ball == "A") {
      (actual_world["A velocity x"] != cf_world["A velocity x"]) || (actual_world["A velocity y"] != cf_world["A velocity y"]);
    } else if (ball == "B") {
      (actual_world["B velocity x"] != cf_world["B velocity x"]) || (actual_world["B velocity y"] != cf_world["B velocity y"]);
    }
  }
}

var meaning = function(utterance, actual_world, cf_world, timing, cf_premise_type, cf_conclusion_type) {
  if (utterance == "silence") {
    return true;
  } else if (utterance == "A caused B") {
    return (
      // first A moved
      (meaning("A moved", actual_world, "NA", "start")) &&
      // then B moved
      (meaning("B moved", actual_world, "NA", "end")) &&
      // and if A hadn't moved, then B wouldn't have moved
      (meaning(counterfactualize("A moved", cf_premise_type), cf_world, "NA", "start")) &&
      (meaning(counterfactualize("B moved", cf_conclusion_type), cf_world, "NA", "end"))
    )
  } else if (utterance == "A moved" && timing == "start") {
    return moved(actual_world, "A");
  } else if (utterance == "B moved" && timing == "start") {
    return moved(actual_world, "B");
  } else if (utterance == "A moved" && timing == "end") {
    var actual_world_later = run_physics(actual_world);
    return moved(actual_world_later, "A");
  } else if (utterance == "B moved" && timing == "end") {
    var actual_world_later = run_physics(actual_world);
    return moved(actual_world_later, "B");
  } else if (utterance == "not A moved") {
    return !(meaning("A moved", actual_world, cf_world, timing));
  } else if (utterance == "not B moved") {
    return !(meaning("B moved", actual_world, cf_world, timing));
  } else if (utterance == "A moved differently") {
    return different("A", actual_world, cf_world, timing);
  } else if (utterance == "B moved differently") {
    return different("B", actual_world, cf_world, timing);
  }
}


var utterancePrior = function() {
  return uniformDraw(["A caused B", "silence"]);
}

var CF = setup_counterfactuals(prior_functions, meaning, utterancePrior, stickiness);
var literal_listener = CF.literal_listener;
var endorsement = CF.endorsement;
var prior_sampler = CF.prior_sampler;
var cf_sampler = CF.cf_sampler;

var w = prior_sampler();
display(w);
var cf_w = cf_sampler(w);
display(cf_w);


// display(literal_listener("A caused B"));
// literal_listener("A caused B");
// // endorsement({a_velocity: 1, b_velocity: 0, a_position: 0, b_position: 1});

// display("A hits B: " +
//       endorsement({a_velocity: 1, b_velocity: 0, a_position: 0, b_position: 1}))
// display("symmetric collision: " + 
//       endorsement({a_velocity: 1, b_velocity: -1, a_position: 0, b_position: 1}))
// display("A follows B: " + 
//       endorsement({a_velocity: 1, b_velocity: 1, a_position: 0, b_position: 1}))
// display("B follows A: " + 
//       endorsement({a_velocity: -1, b_velocity: -1, a_position: 0, b_position: 1}))

// var w = prior_sampler();
// utils.write(convert_for_phys(w), "random world");

// utils.write({
//   A: {velocity: {x: 0, y: 0}, position: {x: 6.5, y: -10}},
//   B: {velocity: {x: 0, y: 0}, position: {x: 6.5, y: 10}}
// }, "specific world");


utils.write(convert_for_phys(prior_sampler()), "random world");
utils.write(convert_for_phys(prior_sampler()), "random world");
utils.write(convert_for_phys(prior_sampler()), "random world");
utils.write(convert_for_phys(prior_sampler()), "random world");
utils.write(convert_for_phys(prior_sampler()), "random world");

utils.finish("ab2d");
