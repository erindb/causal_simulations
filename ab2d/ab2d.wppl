/*
webppl ab2d.wppl --require ../node_modules/utils/ --results_dir ../results/ --modules_dir ../node_modules/
*/

// parameter of the model -- how closely should counterfactual
// RVs match actual RVs?
var STICKINESS = 0.53;

/* Velocity prior:
Each ball, A and B, can take any velocity between -1 and 1 
(or some set of equally spaced values in that region) with
equal probability.*/
// uncomment for continuous version:
// var velocity_prior = uniform(-1, 1);
// discrete version:
// var velocity_prior = function() {return uniformDraw([-1, 0, 1.0])}
var vs = map(function(x) {return _.round(x, 1)}, _.range(-1, 1.1, 1));
display(vs);
var velocity_prior = function() {return uniformDraw(vs)}


/* Prior functions
So that it's easier to compute the counterfactual, write the prior
in terms of independent random variables, each with its own distribution.
*/
var prior_functions = {
  a_velocity: velocity_prior,
  b_velocity: velocity_prior,
  a_position: function() {return 0;},
  b_position: function() {return 1;}
}

var convert_for_phys = function(w) {
  return {
    "A": {
      "velocity": {
        "x": w.a_velocity,
        "y": 0
      },
      "position": {
        "x": w.a_position,
        "y": 0
      },
    },
    "B": {
      "velocity": {
        "x": w.b_velocity,
        "y": 0
      },
      "position":  {
        "x": w.b_position,
        "y": 0
      },
    }
  }
}

var convert_from_phys = function(w) {
  return {
    "a_velocity": w.A.velocity.x,
    "a_position": w.A.position.x,
    "b_velocity": w.B.velocity.x,
    "b_position": w.B.position.x
  }
}

// run a physics simulator to see what the positions and
// velocities of A and B will be at a later timepoint.
// this version isn't general, just applies to this situation
var run_physics = function(w) {
  // convert to bodies
  var later_world = utils.run_physics(convert_for_phys(w));
  return convert_from_phys(later_world);
}

var moved = function(w, ball) {
  var v = (ball=="A") ? w.a_velocity : w.b_velocity;
  return !(Math.abs(v - 0) < 0.0001);
}

var counterfactualize = function(utterance, cf_type) {
  if (cf_type == "how") {
    return utterance + " differently";
  } else {
    return "not " + utterance;
  }
}

var different = function(ball, actual_world, cf_world, timing) {
  if (timing == "end") {
    var actual_world_later = run_physics(actual_world);
    var cf_world_later = run_physics(cf_world);
    return different(ball, actual_world_later, cf_world_later);
  } else {
    if (ball == "A") {
      actual_world.a_velocity != cf_world.a_velocity;
    } else if (ball == "B") {
      actual_world.b_velocity != cf_world.b_velocity;
    }
  }
}

var meaning = function(utterance, actual_world, cf_world, timing, cf_premise_type, cf_conclusion_type) {
  if (utterance == "silence") {
    return true;
  } else if (utterance == "A caused B") {
    return (
      // first A moved
      (meaning("A moved", actual_world, "NA", "start")) &&
      // then B moved
      (meaning("B moved", actual_world, "NA", "end")) &&
      // and if A hadn't moved, then B wouldn't have moved
      (meaning(counterfactualize("A moved", cf_premise_type), cf_world, "NA", "start")) &&
      (meaning(counterfactualize("B moved", cf_conclusion_type), cf_world, "NA", "end"))
    )
  } else if (utterance == "A moved" && timing == "start") {
    return moved(actual_world, "A");
  } else if (utterance == "B moved" && timing == "start") {
    return moved(actual_world, "B");
  } else if (utterance == "A moved" && timing == "end") {
    var actual_world_later = run_physics(actual_world);
    return moved(actual_world_later, "A");
  } else if (utterance == "B moved" && timing == "end") {
    var actual_world_later = run_physics(actual_world);
    return moved(actual_world_later, "B");
  } else if (utterance == "not A moved") {
    return !(meaning("A moved", actual_world, cf_world, timing));
  } else if (utterance == "not B moved") {
    return !(meaning("B moved", actual_world, cf_world, timing));
  } else if (utterance == "A moved differently") {
    return different("A", actual_world, cf_world, timing);
  } else if (utterance == "B moved differently") {
    return different("B", actual_world, cf_world, timing);
  }
}


var utterancePrior = function() {
  return uniformDraw(["A caused B", "silence"]);
}

var CF = setup_counterfactuals(prior_functions, meaning, utterancePrior);
var literal_listener = CF.literal_listener;
var endorsement = CF.endorsement;
var prior_sampler = CF.prior_sampler;

// literal_listener("A caused B");
// // endorsement({a_velocity: 1, b_velocity: 0, a_position: 0, b_position: 1});

display("A hits B: " +
      endorsement({a_velocity: 1, b_velocity: 0, a_position: 0, b_position: 1}))
// display("symmetric collision: " + 
//       endorsement({a_velocity: 1, b_velocity: -1, a_position: 0, b_position: 1}))
// display("A follows B: " + 
//       endorsement({a_velocity: 1, b_velocity: 1, a_position: 0, b_position: 1}))
// display("B follows A: " + 
//       endorsement({a_velocity: -1, b_velocity: -1, a_position: 0, b_position: 1}))

var w = prior_sampler();
utils.write(convert_for_phys(w), "random world");

utils.finish("ab2d");
