var fs = require('fs');
var physics = require('./physics_engine.js')
var worlds_to_evaluate = require('../../experiment/worlds_to_evaluate.js')
// var babyparse = require('babyparse');
// var jStat = require('jStat').jStat;

function max(arr) {return Math.max.apply(null, arr);};
function min(arr) {return Math.min.apply(null, arr);};
function sum(arr) {return jStat.sum(arr);};

var get_variable = function(tag) {
	for (var i = 0; i < process.argv.length; i++) {
		if (process.argv[i] == tag) {
			return process.argv[i+1];
		}
	}
};

var get_flag = function(tag) {
	for (var i = 0; i < process.argv.length; i++) {
		if (process.argv[i] == tag) {
			return true;
		}
	}
	return false;
};

var results_dir = "results/";
var modules_dir = "node_modules/";
for (var i = 0; i < process.argv.length; i++) {
	if (process.argv[i] == "--results_dir") {
		results_dir = process.argv[i+1];
	}
	if (process.argv[i] == "--modules_dir") {
		modules_dir = process.argv[i+1];
	}
}
if (fs.lstatSync(results_dir).isDirectory()) {
	console.log("results will be written to: " + results_dir);
} else {
	console.log("results directory `" + results_dir + "` does not exist.");
}
if (fs.lstatSync(modules_dir).isDirectory()) {
	console.log("reading templates from node dir: " + modules_dir);
} else {
	console.log("modules directory `" + modules_dir + "` does not exist.");
}


// physics.run_physics_engine();

var convert_to_physics = function(w) {
	// do any conversions to create the bodies or whatever
	return w;
}

var convert_to_wppl = function(w) {
	// grab velocities and positions
	return w;
}

var world_is1d = function(w) {
  return _.keys(w[_.keys(w)[0]]["velocity"]).length == 0;
}

var run_physics = function(w) {
	var dimensionality = world_is1d(w) ? 1 : 2;

	var world = physics.setup_physics(w);
	for (var i=0; i < 150; i++) {
		world.step(1/60);
	}

	var bodies = {};
	for (var i=0; i<world.bodies.length; i++) {
		var body = world.bodies[i];
		bodies[body.id] = {
			velocity: dimensionality == 1 ? body.velocity[0]/10 : {
				"x": body.velocity[0]/10,
				"y": body.velocity[1]/10
			},
			position: dimensionality == 1 ? (body.position[0]+2)/4 : {
				"x": body.position[0]+2/4,
				"y": body.position[1]
			}
		}
	}

	// returns wppl representation of world at a later timepoint
	return bodies;
};

var worlds = [];
var write = function(world, label) {
	worlds.push({"world": world, "label": label});
}

var finish = function(output_file_tag) {
	var output_file_tag = output_file_tag || "tmp";
	var output_js_filename = output_file_tag + ".js";
	var output_html_filename = output_file_tag + ".html";

	console.log("writing worlds...");

	// will write json for html to read

	// write worlds to some file somewhere in such a way
	// that i can  view their animations.
	var s = "var results = " + JSON.stringify(worlds, undefined, indent=2);
	// write s to a file
	fs.writeFile(results_dir + output_js_filename, s)
	// fs.writeFile("results/tmp.html", s)

	fs.readFile(modules_dir + "utils/results_template/results_template.html", 'utf8', function(err, data) {
		fs.writeFile(results_dir + output_html_filename, data.replace(
			"<script src='tmp.js'></script>",
			"<script src='" + output_js_filename + "'></script>"
		));
	});

	return "worlds written";
}

var float = function(x) {
	return parseFloat(x);
}



module.exports = {
	max: max,
	min: min,
	sum: sum,
	run_physics: run_physics,
	get_flag: get_flag,
	float: float,
	write: write,
	finish: finish,
	get_variable: get_variable,
	worlds_to_evaluate: worlds_to_evaluate.worlds_to_evaluate
};
