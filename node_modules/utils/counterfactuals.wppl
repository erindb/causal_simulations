var setup_counterfactuals = function(prior_functions, meaning, utterancePrior) {

	// for each of these, we separately infer the marginal dist

	// counterfactual prior iterates through random variables from world prior and
	// flips stickiness and uses marginal dist to resample.

	// if there are any deterministic variables, we can condition
	// on the exogenous random variables' values

	/* Counterfactual wrapper:
	For a given RV, there's a function `fn` that generates the
	prior distribution for that RV.

	There's also an `actual` value that that RV takes in the "real" world.
	We then consider what else could have happened instead. (counterfactually)

	We do this by either keeping the actual value of the RV the same
	or resampling from the prior.*/
	var cf = function(fn, actual) {
	  if (flip(STICKINESS)) {
	    return actual;
	  } else {
	    return fn();
	  }
	}
	var prior_sampler = function() {
	  return mapObj(prior_functions, function(fn, key) {
	    return [key, fn()];
	  });
	}
	var cf_sampler = function(actual_world) {
	  return mapObj(actual_world, function(actual_value, rv_key) {
	    // look up the prior function for this random variable:
	    var fn = prior_functions[rv_key];
	    // counterfactually sample, given the actual value:
	    return [rv_key, cf(fn, actual_value)];
	  })
	}


	var literal_listener = function(utterance) {
	  return Infer({model: function() {
	    var w = prior_sampler();
	    var cf_w = cf_sampler(w);
	    condition(meaning(utterance, w, cf_w));
	    return w;
	  }})
	}

	var speaker = function(w) {
	  return Infer({model: function() {
	    var utterance = utterancePrior();
	    var l0 = literal_listener(utterance);
	    factor(l0.score(w));
	    return utterance;
	  }})
	}

	var speaker = function(w) {
	  return Infer({model: function() {
	    var utterance = utterancePrior();
	    var l0 = literal_listener(utterance);
	    factor(l0.score(w));
	    return utterance;
	  }})
	}

	var endorsement = function(w) {
	  var s1 = speaker(w);
	  return Math.exp(s1.score("A caused B"));
	}

	return {
		"cf": cf,
		"prior_sampler": prior_sampler,
		"cf_sampler": cf_sampler,
		"literal_listener": literal_listener,
		"speaker": speaker,
		"endorsement": endorsement
	}
}