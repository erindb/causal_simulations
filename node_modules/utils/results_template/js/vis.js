var objects = {};

var setup_animation_for_world = function(result_index) {

  $("body").append(
    "<div class='results' id='results" + result_index +
    "'></div>"
  );
  $( "#results" + result_index ).append(
    "<h3>" + result_index + ".</h3>"
  );
  var color_step = Math.round((99-55)/results.length);
  console.log(color_step);
  var shading = 55 + result_index*color_step;
  var color = "#" + shading + shading + shading;
  $( "#results" + result_index ).css({
    "background-color": color,
    "padding": "10px"
  });
  $( "#results" + result_index ).append(
    "<p id='label" + result_index + "'></p>"
  );
  $( "#results" + result_index ).append(
    "<p id='world" + result_index + "'></p>"
  );
  $( "#button" + result_index ).append(
    "<button>Animate</button>"
  );

  var label = results[result_index].label;
  // <div id="results"></div>
  $( "#label" + result_index ).append(label);
  var w = results[result_index].world;
  $( "#world" + result_index ).append(JSON.stringify(w));

  init();
  animate();

  // init();
  // animate();

  function init(){

    objects["world" + result_index] = setup_physics(w, result_index);

    // Pixi.js zoom level
    objects["zoom" + result_index] = 10;

    // Initialize the stage
    objects["renderer" + result_index] =  PIXI.autoDetectRenderer(400, 200),
    objects["stage" + result_index] = new PIXI.Stage(0xFFFFFF);

    // We use a container inside the stage for all our content
    // This enables us to zoom and translate the content
    objects["container" + result_index] =     new PIXI.DisplayObjectContainer(),
    objects["stage" + result_index].addChild(objects["container" + result_index]);

    // Add the canvas to the DOM
    $("#results" + result_index).append(objects["renderer" + result_index].view);

    // Add transform to the container
    objects["container" + result_index].position.x =  objects["renderer" + result_index].width/2; // center at origin
    objects["container" + result_index].position.y =  objects["renderer" + result_index].height/2;
    objects["container" + result_index].scale.x =  objects["zoom" + result_index];  // zoom in
    objects["container" + result_index].scale.y = -objects["zoom" + result_index]; // Note: we flip the y axis to make "up" the physics "up"

    // Draw the box.
    objects["drawn_ball_A_" + result_index] = new PIXI.Graphics();
    objects["drawn_ball_A_" + result_index].beginFill(0xff0000);
    objects["drawn_ball_A_" + result_index].drawCircle(0, 0, 1); // x, y, radius
    // graphics.drawRect(-boxShape.width/2, -boxShape.height/2, boxShape.width, boxShape.height);

    // Add the box to our container
    objects["container" + result_index].addChild(objects["drawn_ball_A_" + result_index]);

    objects["drawn_ball_B_" + result_index] = new PIXI.Graphics();
    objects["drawn_ball_B_" + result_index].beginFill(0x0000ff);
    objects["drawn_ball_B_" + result_index].drawCircle(0, 0, 1); // x, y, radius
    objects["container" + result_index].addChild(objects["drawn_ball_B_" + result_index]);

  }

  var i;
  // Animation loop
  function animate(t){
    i = i || 0;
      t = t || 0;
      requestAnimationFrame(animate);

    if (i < 60) {
      // Move physics bodies forward in time
      objects["world" + result_index].step(1/60);
    }

    // Transfer positions of the physics objects to Pixi.js
    objects["drawn_ball_A_" + result_index].position.x = objects["ballABody" + result_index].position[0];
    objects["drawn_ball_A_" + result_index].position.y = objects["ballABody" + result_index].position[1];

    // Transfer positions of the physics objects to Pixi.js
    objects["drawn_ball_B_" + result_index].position.x = objects["ballBBody" + result_index].position[0];
    objects["drawn_ball_B_" + result_index].position.y = objects["ballBBody" + result_index].position[1];

    // Render scene
    objects["renderer" + result_index].render(objects["stage" + result_index]);
    i++;
  }

  $("#results" + result_index).append(
    "<p><button id='button" + result_index + "'>Animate</button></p>");
  $("#button" + result_index).click(function() {
    i = 0;
    physics_setup = setup_physics(w, result_index);
    animate();
  });
}

for (var result_index = 0; result_index < results.length; result_index++) {
  setup_animation_for_world(result_index);
}